// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Mini App
// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ Telegram Web App API
const isTelegramEnvironment = window.Telegram && window.Telegram.WebApp;

let tg;
if (isTelegramEnvironment) {
    // –†–µ–∞–ª—å–Ω—ã–π Telegram Web App API
    tg = window.Telegram.WebApp;
    tg.ready();
    tg.expand();
} else {
    // Mock –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    tg = {
        ready: () => console.log('Mock: Telegram WebApp ready'),
        expand: () => console.log('Mock: Telegram WebApp expand'),
        sendData: (data) => console.log('Mock sendData:', data),
        close: () => console.log('Mock close'),
        showPopup: (options) => console.log('Mock showPopup:', options)
    };
}

// –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ
let selectedPhotoId = null;
// –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º
let selectedVideoId = selectedPhotoId;

// –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —É–±—Ä–∞–Ω—ã - —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
window.botParams = {
    bot_id: null,
    user_id: null,
    message_id: null,
    saved: false
};
// Function to save bot parameters from URL
function saveBotParamsFromURL() {
    const urlParams = new URLSearchParams(window.location.search);
    
    window.botParams.bot_id = urlParams.get('bot');
    window.botParams.user_id = urlParams.get('user');
    window.botParams.message_id = urlParams.get('message');
    window.botParams.saved = true;
    
    console.log('=== BOT PARAMETERS SAVED ===');
    console.log('Bot ID:', window.botParams.bot_id);
    console.log('User ID:', window.botParams.user_id);
    console.log('Message ID:', window.botParams.message_id);
    console.log('=== END SAVE ===');
    
    // Also save to localStorage as backup
    try {
        localStorage.setItem('botParams', JSON.stringify(window.botParams));
    } catch (e) {
        console.warn('Could not save to localStorage:', e);
    }
    
    return window.botParams;
}

function loadBotParams() {
    // First try to get from global variable
    if (window.botParams && window.botParams.saved) {
        console.log('Loading bot params from global variable');
        return window.botParams;
    }
    
    // Fallback to localStorage
    try {
        const saved = localStorage.getItem('botParams');
        if (saved) {
            window.botParams = JSON.parse(saved);
            console.log('Loading bot params from localStorage');
            return window.botParams;
        }
    } catch (e) {
        console.warn('Could not load from localStorage:', e);
    }
    
    // If nothing found, return empty params
    console.log('No bot params found');
    return {
        bot_id: null,
        user_id: null,
        message_id: null,
        saved: false
    };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø—Ä–µ–≤—å—é —Ñ–æ—Ç–æ
function createPhotoPreview(photo) {
    const previewElement = document.createElement('div');
    previewElement.className = 'photo-preview';
    previewElement.setAttribute('data-id', photo.id);
    
    // –£–±–∏—Ä–∞–µ–º NEW –±–µ–π–¥–∂–∏ - –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è
    const newBadge = '';
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –ø—Ä–µ–≤—å—é —Å –ª–µ–Ω–∏–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π
    previewElement.innerHTML = `
        <div class="photo-container">
            <!-- –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ -->
            <div class="loading-indicator" style="display: none;">
                <div class="loading-spinner"></div>
                <div class="loading-text">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
            </div>
            
            <!-- –ü–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –¥–æ –∑–∞–≥—Ä—É–∑–∫–∏ (–¥–ª—è –ª–µ–Ω–∏–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏) -->
            <div class="preview-placeholder" style="
                width: 100%; 
                height: 100%; 
                background: linear-gradient(135deg, #1a1a1a 0%, #2a2a2a 100%);
                display: flex;
                align-items: center;
                justify-content: center;
                color: #666;
                font-size: 14px;
                border-radius: 12px;
            ">
                üñºÔ∏è –ó–∞–≥—Ä—É–∑–∏—Ç—Å—è –ø—Ä–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–µ
            </div>
            
            <!-- –ü—Ä–µ–≤—å—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–¥–ª—è –ª–µ–Ω–∏–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏) -->
            <img class="preview-image lazy-load" 
                 data-src="${photo.preview_image || photo.image_url}" 
                 alt="${photo.title}" 
                 style="display: none;">
            
            <!-- Overlay —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—à–∏–±–∫–µ -->
            <div class="error-overlay" style="display: none;">
                <div class="error-icon">‚ö†Ô∏è</div>
                <div class="error-text">–§–æ—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ</div>
            </div>
            
            ${newBadge}
        </div>
    `;
    
    // –õ–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π - –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –≤ –æ–±–ª–∞—Å—Ç–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏
    // –≠—Ç–æ—Ç —ç–ª–µ–º–µ–Ω—Ç –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Å–∏—Å—Ç–µ–º–æ–π –ª–µ–Ω–∏–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–æ—Ç–æ
    previewElement.addEventListener('click', () => {
        // –°–Ω–∞—á–∞–ª–∞ —É–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å 'selected' —É –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        document.querySelectorAll('.photo-preview, .video-preview').forEach(el => el.classList.remove('selected'));
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å 'selected' —Ç–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É
        previewElement.classList.add('selected');
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ –≤ localStorage
        localStorage.setItem('selectedPhotoId', photo.id);
        localStorage.setItem('selectedVideoId', photo.id); // –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
        
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ñ–æ—Ç–æ –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        window.location.href = `photo.html?id=${photo.id}`;
    });
    
    return previewElement;
}

// –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º
function createVideoPreview(video) {
    return createPhotoPreview(video);
}

// –§—É–Ω–∫—Ü–∏–∏ –ª–∞–π–∫–æ–≤ –∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ —É–±—Ä–∞–Ω—ã

// –§—É–Ω–∫—Ü–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —É–¥–∞–ª–µ–Ω—ã - —Ç–µ–ø–µ—Ä—å –ø—Ä–æ—Å—Ç–∞—è —Å–µ—Ç–∫–∞

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–µ—Ç–∫–∏ —Ñ–æ—Ç–æ
async function loadPhotoGrid() {
    const photoGridElement = document.getElementById('photoGrid') || document.getElementById('videoGrid');
    
    // –û—á–∏—â–∞–µ–º —Å–µ—Ç–∫—É –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    photoGridElement.innerHTML = '';
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π (photoData –∏–ª–∏ videoData)
    const dataToUse = (typeof photoData !== 'undefined' && Array.isArray(photoData)) ? photoData : videoData;
    if (typeof dataToUse !== 'undefined' && Array.isArray(dataToUse)) {
        
        if (dataToUse.length === 0) {
            photoGridElement.innerHTML = '<p class="no-videos">üî• –°–∫–æ—Ä–æ —Ç—É—Ç –±—É–¥–µ—Ç –≥–æ—Ä—è—á–æ! üî•<br><span class="coming-soon">–ù–æ–≤—ã–µ —Ñ–æ—Ç–æ —É–∂–µ –≥–æ—Ç–æ–≤—è—Ç—Å—è...</span></p>';
            return;
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Ñ–æ—Ç–æ
        dataToUse.forEach(photo => {
            const previewElement = createPhotoPreview(photo);
            photoGridElement.appendChild(previewElement);
        });
    } else {
        // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        photoGridElement.innerHTML = '<p class="error-message">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</p>';
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä
    const savedPhotoId = localStorage.getItem('selectedPhotoId') || localStorage.getItem('selectedVideoId');
    if (savedPhotoId) {
        // –ù–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç –∏ –≤—ã–¥–µ–ª—è–µ–º –µ–≥–æ
        const element = document.querySelector(`.photo-preview[data-id="${savedPhotoId}"], .video-preview[data-id="${savedPhotoId}"]`);
        if (element) {
            element.classList.add('selected');
            selectedPhotoId = savedPhotoId;
        }
    }
}

// –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º
async function loadVideoGrid() {
    return loadPhotoGrid();
}
// === –°–ò–°–¢–ï–ú–ê –õ–ï–ù–ò–í–û–ô –ó–ê–ì–†–£–ó–ö–ò ===

// Intersection Observer –¥–ª—è –ª–µ–Ω–∏–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–≤—å—é —Ñ–æ—Ç–æ
let lazyLoadObserver = null;

// –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ª–µ–Ω–∏–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
function initLazyLoading() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É Intersection Observer
    if (!('IntersectionObserver' in window)) {
        console.warn('IntersectionObserver –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ä–∞–∑—É');
        loadAllImagesImmediately();
        return;
    }
    
    // –°–æ–∑–¥–∞–µ–º –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å
    lazyLoadObserver = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                loadPreviewImage(entry.target);
                lazyLoadObserver.unobserve(entry.target);
            }
        });
    }, {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞ 200px –¥–æ –ø–æ—è–≤–ª–µ–Ω–∏—è –≤ –æ–±–ª–∞—Å—Ç–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏
        rootMargin: '200px',
        threshold: 0.1
    });
    
    // –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ –≤—Å–µ–º–∏ –ø—Ä–µ–≤—å—é —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
    document.querySelectorAll('.photo-preview').forEach(element => {
        lazyLoadObserver.observe(element);
    });
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–≤—å—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
function loadPreviewImage(previewElement) {
    const previewImage = previewElement.querySelector('.preview-image.lazy-load');
    const loadingIndicator = previewElement.querySelector('.loading-indicator');
    const placeholder = previewElement.querySelector('.preview-placeholder');
    const errorOverlay = previewElement.querySelector('.error-overlay');
    
    if (!previewImage || !previewImage.dataset.src) {
        console.warn('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–≤—å—é —Ñ–æ—Ç–æ');
        return;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    placeholder.style.display = 'none';
    loadingIndicator.style.display = 'flex';
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
    previewImage.addEventListener('load', function() {
        console.log(`–ü—Ä–µ–≤—å—é —Ñ–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: ${previewImage.src}`);
        loadingIndicator.style.display = 'none';
        previewImage.style.display = 'block';
    }, { once: true });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏
    previewImage.addEventListener('error', function() {
        console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–≤—å—é —Ñ–æ—Ç–æ: ${previewImage.src}`);
        loadingIndicator.style.display = 'none';
        errorOverlay.style.display = 'flex';
    }, { once: true });
    
    // –¢–∞–π–º–∞—É—Ç –¥–ª—è –º–µ–¥–ª–µ–Ω–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π (5 —Å–µ–∫—É–Ω–¥)
    const timeout = setTimeout(() => {
        if (loadingIndicator.style.display !== 'none') {
            console.warn(`–ü—Ä–µ–≤—å—é —Ñ–æ—Ç–æ –¥–æ–ª–≥–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è: ${previewImage.dataset.src}`);
            loadingIndicator.style.display = 'none';
            errorOverlay.style.display = 'flex';
        }
    }, 5000);
    
    // –£–±–∏—Ä–∞–µ–º —Ç–∞–π–º–∞—É—Ç –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
    previewImage.addEventListener('load', () => clearTimeout(timeout), { once: true });
    previewImage.addEventListener('error', () => clearTimeout(timeout), { once: true });
    
    // –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
    previewImage.src = previewImage.dataset.src;
    previewImage.classList.remove('lazy-load');
}

// Fallback –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–æ–≤ –±–µ–∑ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Intersection Observer
function loadAllImagesImmediately() {
    document.querySelectorAll('.photo-preview').forEach(previewElement => {
        loadPreviewImage(previewElement);
    });
}

// –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–µ–∂–∏–º–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
let showingFavorites = false;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É –≤—Å–µ–º–∏ —Ñ–æ—Ç–æ –∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–º–∏
function toggleFavoriteView() {
    showingFavorites = !showingFavorites;
    const toggleButton = document.getElementById('favoritesToggle');
    const toggleIcon = toggleButton?.querySelector('.favorites-toggle-icon');
    
    if (showingFavorites) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ
        loadFavoritePhotoGrid();
        toggleIcon.textContent = '‚òÖ';
        toggleButton.classList.add('active');
    } else {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ñ–æ—Ç–æ
        loadPhotoGrid();
        toggleIcon.textContent = '‚òÜ';
        toggleButton.classList.remove('active');
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–ª—å–∫–æ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ
async function loadFavoritePhotoGrid() {
    console.log('=== –ó–ê–ì–†–£–ó–ö–ê –ò–ó–ë–†–ê–ù–ù–´–• –§–û–¢–û ===');
    const photoGridElement = document.getElementById('photoGrid') || document.getElementById('videoGrid');
    
    // –û—á–∏—â–∞–µ–º —Å–µ—Ç–∫—É –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    photoGridElement.innerHTML = '';
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
    console.log('favoritePhotosCache:', favoritePhotosCache);
    console.log('–§—É–Ω–∫—Ü–∏—è getFavoritePhotos –¥–æ—Å—Ç—É–ø–Ω–∞:', typeof getFavoritePhotos === 'function');
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Ñ–æ—Ç–æ
    const favoritePhotos = getFavoritePhotos();
    console.log('–ù–∞–π–¥–µ–Ω–æ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ:', favoritePhotos.length);
    console.log('–ò–∑–±—Ä–∞–Ω–Ω—ã–µ —Ñ–æ—Ç–æ:', favoritePhotos);
    
    if (favoritePhotos.length === 0) {
        photoGridElement.innerHTML = '<p class="no-videos">‚≠ê –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ ‚≠ê<br><span class="coming-soon">–î–æ–±–∞–≤—å—Ç–µ —à–∞–±–ª–æ–Ω—ã –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –Ω–∞–∂–∞–≤ –Ω–∞ –∑–≤–µ–∑–¥–æ—á–∫—É</span></p>';
        return;
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Ñ–æ—Ç–æ
    favoritePhotos.forEach(photo => {
        const previewElement = createPhotoPreview(photo);
        photoGridElement.appendChild(previewElement);
    });
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–µ–Ω–∏–≤—É—é –∑–∞–≥—Ä—É–∑–∫—É
    setTimeout(() => {
        initLazyLoading();
    }, 100);
}

// –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ—Ç–∫—É —Ñ–æ—Ç–æ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', async () => {
    saveBotParamsFromURL();

    try {
        // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –∏–∑ Cloud Storage
        if (typeof loadFavoritesFromCloud === 'function') {
            await loadFavoritesFromCloud();
            console.log('–ò–∑–±—Ä–∞–Ω–Ω–æ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:', favoritePhotosCache);
        } else {
            console.warn('loadFavoritesFromCloud –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        }
        
        await loadPhotoGrid();
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
        const favoritesToggle = document.getElementById('favoritesToggle');
        if (favoritesToggle) {
            favoritesToggle.addEventListener('click', toggleFavoriteView);
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–µ–Ω–∏–≤—É—é –∑–∞–≥—Ä—É–∑–∫—É –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        setTimeout(() => {
            initLazyLoading();
        }, 100);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error);
        
        // –í—Å–µ —Ä–∞–≤–Ω–æ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
        try {
            if (typeof loadFavoritesFromCloud === 'function') {
                await loadFavoritesFromCloud();
            }
        } catch (e) {
            console.warn('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:', e);
        }
        
        await loadPhotoGrid();
        
        // –í—Å–µ —Ä–∞–≤–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–µ–Ω–∏–≤—É—é –∑–∞–≥—Ä—É–∑–∫—É
        setTimeout(() => {
            initLazyLoading();
        }, 100);
    }
}); 