// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Mini App
// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ Telegram Web App API
const isTelegramEnvironment = window.Telegram && window.Telegram.WebApp;

let tg;
if (isTelegramEnvironment) {
    // –†–µ–∞–ª—å–Ω—ã–π Telegram Web App API
    tg = window.Telegram.WebApp;
    tg.ready();
    tg.expand();
} else {
    // Mock –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    tg = {
        ready: () => console.log('Mock: Telegram WebApp ready'),
        expand: () => console.log('Mock: Telegram WebApp expand'),
        sendData: (data) => console.log('Mock sendData:', data),
        close: () => console.log('Mock close'),
        showPopup: (options) => console.log('Mock showPopup:', options)
    };
}

function loadBotParams() {
    // First try to get from global variable
    if (window.botParams && window.botParams.saved) {
        console.log('Loading bot params from global variable');
        return window.botParams;
    }
    
    // Fallback to localStorage
    try {
        const saved = localStorage.getItem('botParams');
        if (saved) {
            window.botParams = JSON.parse(saved);
            console.log('Loading bot params from localStorage');
            return window.botParams;
        }
    } catch (e) {
        console.warn('Could not load from localStorage:', e);
    }
    
    // If nothing found, return empty params
    console.log('No bot params found');
    return {
        bot_id: null,
        user_id: null,
        message_id: null,
        saved: false
    };
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å—ë –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç –∑–∞–≥—Ä—É–∑–∏—Ç—Å—è
document.addEventListener('DOMContentLoaded', function() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è photoData —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (typeof photoData === 'undefined' || !Array.isArray(photoData)) {
        showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Ñ–æ—Ç–æ. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
        return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º ID —Ñ–æ—Ç–æ –∏–∑ URL
    const photoId = getPhotoIdFromURL();
    
    if (!photoId) {
        showError('ID —Ñ–æ—Ç–æ –Ω–µ —É–∫–∞–∑–∞–Ω –≤ URL');
        return;
    }
    
    // –ù–∞—Ö–æ–¥–∏–º —Ñ–æ—Ç–æ –ø–æ ID
    const photo = findPhotoById(photoId);
    
    if (!photo) {
        showError('–§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        return;
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
    document.title = photo.title;
    document.getElementById('photoTitle').textContent = photo.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
    const descriptionText = (typeof getDurationText === 'function') ? getDurationText(photo.id) : photo.displayName || '–§–æ—Ç–æ-—à–∞–±–ª–æ–Ω';
    document.getElementById('photoDescription').textContent = descriptionText;
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ñ–æ—Ç–æ
    displayPhoto(photo);
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
    setupFavoriteButton(photo);
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    setupBackButton();
    setupConfirmButton(photo);
});

// –ü–æ–ª—É—á–∞–µ–º id —Ñ–æ—Ç–æ –∏–∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
function getPhotoIdFromURL() {
    const urlParams = new URLSearchParams(window.location.search);
    return urlParams.get('id');
}

// –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —É–±—Ä–∞–Ω—ã - —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–æ—Ç–æ –ø–æ id –≤ –º–∞—Å—Å–∏–≤–µ –¥–∞–Ω–Ω—ã—Ö
function findPhotoById(id) {
    if (typeof photoData === 'undefined' || !Array.isArray(photoData)) {
        return null;
    }
    return photoData.find(photo => photo.id === id);
}

// –§—É–Ω–∫—Ü–∏–∏ –≥–æ—Ç–æ–≤—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–æ—Ç–æ-—à–∞–±–ª–æ–Ω–∞–º–∏

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
function showError(message) {
    const photoContainer = document.getElementById('photoContainer');
    if (photoContainer) {
        photoContainer.innerHTML = `
            <div class="error-message" style="
                color: white;
                background-color: rgba(255, 0, 0, 0.7);
                padding: 20px;
                border-radius: 5px;
                text-align: center;
                margin: 20px auto;
                max-width: 80%;
            ">
                ${message}
            </div>
        `;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ñ–æ—Ç–æ –∏ –µ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
function displayPhoto(photo) {
    if (!photo) {
        showError('–§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        return;
    }
    
    const photoContainer = document.getElementById('photoContainer');
    if (!photoContainer) {
        return;
    }
    
    photoContainer.innerHTML = '';
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ñ–æ—Ç–æ
    photoContainer.innerHTML = `
        <div class="photo-display-container">
            <!-- –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ -->
            <div class="photo-loading-indicator">
                <div class="photo-loading-spinner"></div>
                <div class="photo-loading-text">–ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ...</div>
            </div>
            
            <!-- Fallback –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ -->
            <!-- Fallback –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–±—Ä–∞–Ω–æ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ -->
            
            <!-- –û—Å–Ω–æ–≤–Ω–æ–µ —Ñ–æ—Ç–æ -->
            <img 
                id="photoElement"
                style="width: 100%; height: auto; min-height: 250px; max-height: 70vh; border: none !important; background-color: #000; object-fit: contain; display: none;"
                src="${photo.image_url}" 
                alt="${photo.title}">
            
            <!-- Overlay —Å –æ—à–∏–±–∫–æ–π -->
            <div class="photo-error-overlay" style="display: none;">
                <div class="photo-error-icon">‚ö†Ô∏è</div>
                <div class="photo-error-text">–§–æ—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ</div>
                <div class="photo-error-subtext">–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É</div>
            </div>
        </div>
    `;
    
    const photoElement = document.getElementById('photoElement');
    const loadingIndicator = photoContainer.querySelector('.photo-loading-indicator');
    // fallbackImage —É–±—Ä–∞–Ω–æ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    const errorOverlay = photoContainer.querySelector('.photo-error-overlay');

    if (photoElement) {
        const showPhoto = () => {
            loadingIndicator.style.display = 'none';
            photoElement.style.display = 'block';
        };

        photoElement.addEventListener('load', function() {
            console.log('–û—Å–Ω–æ–≤–Ω–æ–µ —Ñ–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
            showPhoto();
        });

        photoElement.addEventListener('error', function() {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–æ—Ç–æ');
            loadingIndicator.style.display = 'none';
            errorOverlay.style.display = 'flex';
        });

        // –ï—Å–ª–∏ —Ñ–æ—Ç–æ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
        if (photoElement.complete && photoElement.naturalHeight !== 0) {
            showPhoto();
        }

        // –¢–∞–π–º–∞—É—Ç –¥–ª—è –º–µ–¥–ª–µ–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
        setTimeout(() => {
            if (photoElement.style.display === 'none' && loadingIndicator.style.display !== 'none') {
                showPhoto();
            }
        }, 3000);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
function setupBackButton() {
    const backButton = document.getElementById('backButton');
    if (!backButton) {
        return;
    }
    
    backButton.addEventListener('click', function() {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        window.location.href = 'index.html';
    });
}

function setupConfirmButton(photo) {
    const confirmButton = document.getElementById('confirmButton');
    if (!confirmButton) {
        return;
    }
    
    if (!photo) {
        confirmButton.style.display = 'none';
        return;
    }

    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–Ω–æ–ø–∫—É
    confirmButton.style.display = 'block';
    
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    const newButton = confirmButton.cloneNode(true);
    confirmButton.parentNode.replaceChild(newButton, confirmButton);
    
    newButton.addEventListener('click', function() {
        // –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (—Å–∫—Ä—ã—Ç–æ –¥–æ —É—Å–ø–µ—Ö–∞)
        const notificationElement = document.createElement('div');
        notificationElement.className = 'success-notification';
        notificationElement.innerHTML = `
            <div class="success-icon">üé®</div>
            <div class="success-text">–§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É!</div>
        `;
        notificationElement.style.cssText = `
            position: fixed;
            bottom: 30px;
            left: 50%;
            transform: translateX(-50%) translateY(100px);
            background: linear-gradient(135deg, #4CAF50 0%, #45a049 100%);
            color: white;
            padding: 20px 30px;
            border-radius: 20px;
            z-index: 1000;
            text-align: center;
            box-shadow: 0 8px 25px rgba(76, 175, 80, 0.4);
            border: 2px solid rgba(255, 255, 255, 0.2);
            backdrop-filter: blur(10px);
            display: flex;
            align-items: center;
            gap: 12px;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;
            font-weight: 600;
            font-size: 16px;
            opacity: 0;
            transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
            display: none;
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –∏–∫–æ–Ω–∫–∏ –∏ —Ç–µ–∫—Å—Ç–∞
        const style = document.createElement('style');
        style.textContent = `
            .success-icon {
                font-size: 24px;
                animation: bounce 0.6s ease-in-out;
            }
            .success-text {
                font-size: 16px;
                font-weight: 600;
            }
            @keyframes bounce {
                0%, 20%, 50%, 80%, 100% { transform: translateY(0); }
                40% { transform: translateY(-8px); }
                60% { transform: translateY(-4px); }
            }
        `;
        document.head.appendChild(style);
        document.body.appendChild(notificationElement);
        
        try {
             // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
            let userData = null;
            let telegramUserId = null;
            
            if (isTelegramEnvironment && window.Telegram.WebApp.initDataUnsafe) {
                // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram WebApp
                userData = window.Telegram.WebApp.initDataUnsafe.user;
                telegramUserId = userData ? userData.id : null;
                
                console.log('Telegram user ID:', telegramUserId);
            } else {
                // –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏/—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                console.log('Mock environment - using test user ID');
                telegramUserId = '0';
                userData = {
                    id: '0',
                };
            }
            const botParams = loadBotParams();
            
            // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–∏–∑–º–µ–Ω–µ–Ω–æ –¥–ª—è —Ñ–æ—Ç–æ)
            const requestData = {
                photo_id: photo.id, // –ò–∑–º–µ–Ω–µ–Ω–æ —Å video_id –Ω–∞ photo_id
                bot_id: botParams.bot_id,
                user_id: botParams.user_id,
                message_id: botParams.message_id,
            };
            
            const jsonData = JSON.stringify(requestData);
            console.log('JSON –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:', jsonData);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST –Ω–∞ –Ω–∞—à API —á–µ—Ä–µ–∑ NGINX
            const serverUrl = '/api/photo_template';
            fetch(serverUrl, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: jsonData,
            })
            .then(async (response) => {
                if (!response.ok) throw new Error(`Server error: ${response.status}`);
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
                notificationElement.style.display = 'flex';
                setTimeout(() => {
                    notificationElement.style.opacity = '1';
                    notificationElement.style.transform = 'translateX(-50%) translateY(0)';
                }, 10);
                
                // –ù–ï –∑–∞–∫—Ä—ã–≤–∞–µ–º –º–∏–Ω–∏–∞–ø–ø –¥–ª—è —Ñ–æ—Ç–æ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å—Ç–∞–µ—Ç—Å—è –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
                
                return response.text().catch(() => '');
            })
            .catch((error) => {
                console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', error);
                
                // –ú–µ–Ω—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–∞ –æ—à–∏–±–∫—É
                notificationElement.innerHTML = `
                    <div class="error-icon">‚ùå</div>
                    <div class="error-text">–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏</div>
                `;
                notificationElement.style.background = 'linear-gradient(135deg, #f44336 0%, #d32f2f 100%)';
                notificationElement.style.boxShadow = '0 8px 25px rgba(244, 67, 54, 0.4)';
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                notificationElement.style.display = 'flex';
                setTimeout(() => {
                    notificationElement.style.opacity = '1';
                    notificationElement.style.transform = 'translateX(-50%) translateY(0)';
                }, 10);
            })
            .finally(() => {
                setTimeout(() => {
                    notificationElement.style.opacity = '0';
                    notificationElement.style.transition = 'opacity 0.5s';
                    setTimeout(() => notificationElement.remove(), 500);
                }, 3000);
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞:', error);
            
            // –ú–µ–Ω—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–∞ –æ—à–∏–±–∫—É
            notificationElement.innerHTML = `
                <div class="error-icon">‚ö†Ô∏è</div>
                <div class="error-text">–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</div>
            `;
            notificationElement.style.background = 'linear-gradient(135deg, #ff9800 0%, #f57c00 100%)';
            notificationElement.style.boxShadow = '0 8px 25px rgba(255, 152, 0, 0.4)';
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            notificationElement.style.display = 'flex';
            setTimeout(() => {
                notificationElement.style.opacity = '1';
                notificationElement.style.transform = 'translateX(-50%) translateY(0)';
            }, 10);
            
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
            setTimeout(() => {
                notificationElement.style.opacity = '0';
                notificationElement.style.transition = 'opacity 0.5s';
                
                setTimeout(() => {
                    notificationElement.remove();
                }, 500);
            }, 5000);
        }
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–Ω–æ–ø–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
function setupFavoriteButton(photo) {
    console.log('=== –ù–ê–°–¢–†–û–ô–ö–ê –ö–ù–û–ü–ö–ò –ò–ó–ë–†–ê–ù–ù–û–ì–û ===');
    console.log('–§–æ—Ç–æ:', photo);
    
    const favoriteButton = document.getElementById('favoriteButton');
    const favoriteIcon = favoriteButton?.querySelector('.favorite-icon');
    
    console.log('–ö–Ω–æ–ø–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –Ω–∞–π–¥–µ–Ω–∞:', !!favoriteButton);
    console.log('–ò–∫–æ–Ω–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –Ω–∞–π–¥–µ–Ω–∞:', !!favoriteIcon);
    
    if (!favoriteButton || !photo) {
        console.log('–ö–Ω–æ–ø–∫–∞ –∏–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –≤—ã—Ö–æ–¥–∏–º');
        return;
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–∫–∏
    function updateFavoriteButton() {
        console.log('–û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ');
        console.log('–§—É–Ω–∫—Ü–∏—è isPhotoFavorite –¥–æ—Å—Ç—É–ø–Ω–∞:', typeof isPhotoFavorite === 'function');
        
        const isFavorite = (typeof isPhotoFavorite === 'function') ? isPhotoFavorite(photo.id) : false;
        console.log('–§–æ—Ç–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º:', isFavorite);
        
        if (isFavorite) {
            favoriteIcon.textContent = '‚òÖ';
            favoriteButton.classList.add('favorite-active');
            console.log('–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–∞—è –∑–≤–µ–∑–¥–∞');
        } else {
            favoriteIcon.textContent = '‚òÜ';
            favoriteButton.classList.remove('favorite-active');
            console.log('–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø—É—Å—Ç–∞—è –∑–≤–µ–∑–¥–∞');
        }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    updateFavoriteButton();
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞
    favoriteButton.addEventListener('click', async function() {
        console.log('=== –ö–õ–ò–ö –ü–û –ö–ù–û–ü–ö–ï –ò–ó–ë–†–ê–ù–ù–û–ì–û ===');
        console.log('ID —Ñ–æ—Ç–æ:', photo.id);
        
        try {
            if (typeof togglePhotoFavorite === 'function') {
                console.log('–í—ã–∑—ã–≤–∞–µ–º togglePhotoFavorite');
                const newFavoriteStatus = await togglePhotoFavorite(photo.id);
                console.log('–ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:', newFavoriteStatus);
                
                updateFavoriteButton();
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                const message = newFavoriteStatus ? '–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ' : '–£–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ';
                console.log(message + ': ' + photo.title);
                
                // –¢–∞–∫—Ç–∏–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
                if (window.Telegram && window.Telegram.WebApp && window.Telegram.WebApp.HapticFeedback) {
                    window.Telegram.WebApp.HapticFeedback.impactOccurred('light');
                }
            } else {
                console.warn('togglePhotoFavorite –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:', error);
        }
        
        console.log('=== –ö–û–ù–ï–¶ –ö–õ–ò–ö–ê –ü–û –ö–ù–û–ü–ö–ï –ò–ó–ë–†–ê–ù–ù–û–ì–û ===');
    });
    
    console.log('=== –ö–û–ù–ï–¶ –ù–ê–°–¢–†–û–ô–ö–ò –ö–ù–û–ü–ö–ò –ò–ó–ë–†–ê–ù–ù–û–ì–û ===');
}
